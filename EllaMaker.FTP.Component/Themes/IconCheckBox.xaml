<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ctl="clr-namespace:EllaMaker.FTP.Component"
    xmlns:em="clr-namespace:EllaMaker.FTP.Component.Enum"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:beh="clr-namespace:EllaMaker.FTP.Component.Command"
    xmlns:cvt="clr-namespace:EllaMaker.FTP.Component.Converter">
    <Style TargetType="ctl:IconCheckBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template"  >
            <Setter.Value>
                <ControlTemplate TargetType="ctl:IconCheckBox">
                    <ControlTemplate.Resources>
                        <cvt:NullImageConverter x:Key="nullImageCV" />
                        <cvt:EnumToVisiableConverter x:Key="enumToVisiableConverter"/>
                        <Storyboard x:Key="leaveAnim">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="enterAnim">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                      Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="1.3" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                      Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="1.3" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2"
                                                      Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border RenderTransformOrigin="0.5,0.5"
                                Name="root"
                                IsEnabled="{TemplateBinding IsEnabled}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <i:Interaction.Behaviors>
                            <beh:EventToCommandBehavior Event="PreviewMouseLeftButtonUp" Command="{Binding  Path=root_PreviewMouseLeftButtonUpCmd,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctl:IconCheckBox}}}"  PassArguments="True"  />
                            <beh:EventToCommandBehavior Event="PreviewMouseLeftButtonDown" Command="{Binding  Path=root_PreviewMouseLeftButtonDownCmd,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctl:IconCheckBox}}}"  PassArguments="True"  />
                            <beh:EventToCommandBehavior Event="PreviewMouseMove" Command="{Binding  Path=root_PreviewMouseMoveCmd,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctl:IconCheckBox}}}"  PassArguments="True"  />
                        </i:Interaction.Behaviors>
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="1"  ScaleY="1" />
                        </Border.RenderTransform>
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                <BeginStoryboard  Storyboard="{StaticResource enterAnim}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                <BeginStoryboard Storyboard="{StaticResource leaveAnim}" />
                            </EventTrigger>
                        </Border.Triggers>
                        <DockPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   RenderTransformOrigin="0.5,0.5">
                            <DockPanel.RenderTransform>
                                <RotateTransform Angle="{Binding Angle}" />
                            </DockPanel.RenderTransform>
                            <ContentPresenter Visibility="Visible"
                                  Width="auto" 
                                  DockPanel.Dock="{TemplateBinding ContentDock}"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  RecognizesAccessKey="True" />
                            <Grid>
                                <Image Name="img"
                                           Visibility="{Binding SourceType, Converter={StaticResource enumToVisiableConverter},ConverterParameter={x:Static em:ImageSourceType.Image}}"
                                           Source="{Binding Source,Converter={StaticResource nullImageCV}}"
                                           Stretch="Fill"
                                           Margin="1,0" />
                                <Path  Name="path"  
                                              Visibility="{Binding SourceType, Converter={StaticResource enumToVisiableConverter},ConverterParameter={x:Static em:ImageSourceType.Path}}"
                                              Data="{Binding Source}"
                                              Fill="{TemplateBinding Foreground}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Stretch="Fill" />
                            </Grid>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="CheckSourceType" Value="{x:Static em:ImageSourceType.Path}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="path"  Property="Visibility" Value="Visible" />
                                <Setter TargetName="img"  Property="Visibility" Value="Collapsed" />

                                <Setter TargetName="path"  Property="Data" Value="{Binding CheckSource}" />
                                <Setter TargetName="root" Property="ToolTip"  Value="{Binding CheckToolTip}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="CheckSourceType" Value="{x:Static em:ImageSourceType.Image}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="path"  Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="img"  Property="Visibility" Value="Visible" />
                                <Setter TargetName="img"  Property="Source" Value="{Binding CheckSource}" />
                                <Setter TargetName="root" Property="ToolTip"  Value="{Binding CheckToolTip}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="UnCheckSourceType" Value="{x:Static em:ImageSourceType.Path}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="path"  Property="Visibility" Value="Visible" />
                                <Setter TargetName="img"  Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="path"  Property="Data" Value="{Binding UnCheckSource}" />
                                <Setter TargetName="root" Property="ToolTip"  Value="{Binding UnCheckToolTip}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="UnCheckSourceType" Value="{x:Static em:ImageSourceType.Image}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="path"  Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="img"  Property="Visibility" Value="Visible" />
                                <Setter TargetName="img"  Property="Source" Value="{Binding UnCheckSource}" />
                                <Setter TargetName="root" Property="ToolTip"  Value="{Binding UnCheckToolTip}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"  Value="0.5" />
            </Trigger>

        </Style.Triggers>
    </Style>
</ResourceDictionary>
